{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "functionAppName": {
      "type": "string",
      "defaultValue": "[take(concat('letsencrypt-runner-', uniqueString(resourceGroup().id)),60)]",
      "metadata": {
        "description": "Globally unique name for the Let's Encrypt Renewer function app."
      }
    },
    "hostingPlanName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[take(concat('letsencrypt-runner', uniqueString(resourceGroup().id)),60)]",
      "metadata": {
        "description": "Name used for the hosting plan"
      }
    },
    "vaultName": {
      "type": "string",
      "defaultValue": "[take(concat('letsencrypt-runnerr-', uniqueString(resourceGroup().id)),24)]",
      "metadata": {
        "description": "Globally unique name for the Key Vault used to store the certificate and secrets used by the Let's Encrypt Renewer function app"
      }
    },
    "targetWebAppResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group that contains the web app that should have the SSL cert assigned"
      }
    },
    "targetWebAppName": {
      "type": "string",
      "metadata": {
        "description": "The name of the web application that should have the SSL Cert assigned"
      }
    },
    "dnsResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group that contains the Azure DNS service (must already exists)"
      }
    },
    "roleNameGuid": {
      "type": "string",
      "metadata": {
        "description": "A new GUID used to identify the role assignment made for the Service Principal added to the Web App Resource Group"
      },
      "defaultValue": "[newGuid()]"
    },
    "roleNameDnsGuid": {
      "type": "string",
      "metadata": {
        "description": "A new GUID used to identify the role assignment that made for the Service Principal added to the DNS resource group"
      },
      "defaultValue": "[newGuid()]"
    },
    "builtInRoleType": {
      "type": "string",
      "allowedValues": [
        "Owner",
        "Contributor",
        "Reader"
      ],
      "metadata": {
        "description": "Built-in role to assign"
      },
      "defaultValue": "Contributor"
    },
    "csrOrganisation": {
      "type": "string",
      "metadata": {
        "description": "Name of the organisation that owns the domain, will be present in the Certificate"
      }
    },
    "acmeRegistrationEmail": {
      "type": "string",
      "metadata": {
        "description": "Email used to register with Let's Encrypt, you will recieve certificate expiry notifications on this email"
      }
    },
    "acmeEnvironment": {
      "type": "string",
      "allowedValues": [
        "production",
        "staging"
      ],
      "metadata": {
        "description": "The environment to request certificates from"
      },
      "defaultValue": "staging"
    },
    "certificateDomains": {
      "type": "string",
      "metadata": {
        "description": "The coma separated domain names to request a certificate for e.g. *.yourdomain.com"
      }
    },
    "pfxPass": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "The password used to protect the certificate (only used internally)"
      }
    },
    "runFromPackage": {
      "type": "string",
      "defaultValue": "https://letsencryptazure.blob.core.windows.net/releases/126.zip",
      "metadata": {
        "description": "Set this to a url for a deployment package or 0 for not deploying anything to the Azure Function. The Default value deploy the latest version of the Azure Function Renewer code"
      }
    },
    "certRenewSchedule": {
      "type": "string",
      "defaultValue": "0 0 3 * * *",
      "metadata": {
        "description": "Cron expression for when the certificate renewal job should run see examples here: https://github.com/atifaziz/NCrontab/wiki/Crontab-Expression. Defaults to run every day at 03.00 UTC"
      }
    }
  },
  "variables": {
    "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]",
    "storageAccountid": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
    "storageConnectionStringName": "blobStorageConnectionString",
    "storageAccountResourceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
    "appInsightsName": "[concat(uniquestring(resourceGroup().id), 'appinsight')]",
    "pfxPass": "pfxPassword",
    "Owner": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
    "Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
    "Reader": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
    "scope": "[concat(subscription().id, '/resourceGroups/', parameters('targetWebAppResourceGroupName'))]",
    "scopeDns": "[concat(subscription().id, '/resourceGroups/', parameters('dnsResourceGroupName'))]"
  },
  "resources": [
    {
      "name": "[parameters('vaultName')]",
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2018-02-14",
      "location": "[resourceGroup().location]",
      "tags": {},
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', parameters('functionAppName'))]"
      ],
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "accessPolicies": [
          {
            "tenantId": "[reference(concat('Microsoft.Web/sites/', parameters('functionAppName')), '2018-02-01', 'Full').identity.tenantId]",
            "objectId": "[reference(concat('Microsoft.Web/sites/', parameters('functionAppName')), '2018-02-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [],
              "secrets": [
                "get",
                "set",
                "list"
              ],
              "certificates": [
                "get",
                "list",
                "import",
                "update"
              ],
              "storage": []
            }
          }
        ],
        "enabledForTemplateDeployment": true
      },
      "resources": [
        {
          "type": "secrets",
          "name": "[variables('storageConnectionStringName')]",
          "apiVersion": "2018-02-14",
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults/', parameters('vaultName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
          ],
          "properties": {
            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountResourceId'),'2015-05-01-preview').key1)]"
          }
        },
        {
          "type": "secrets",
          "name": "[variables('pfxPass')]",
          "apiVersion": "2018-02-14",
          "dependsOn": [
            "[resourceId('Microsoft.KeyVault/vaults/', parameters('vaultName'))]"
          ],
          "properties": {
            "value": "[parameters('pfxPass')]"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2015-04-01",
      "name": "[parameters('hostingPlanName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[parameters('hostingPlanName')]",
        "computeMode": "Dynamic",
        "sku": "Dynamic"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[parameters('functionAppName')]",
      "type": "Microsoft.Web/sites",
      "kind": "functionapp",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverFarms/', parameters('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]": "empty",
        "displayName": "Website"
      },
      "properties": {
        "name": "[parameters('functionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
      },
      "resources": [
        {
          "name": "appsettings",
          "type": "config",
          "apiVersion": "2015-08-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites/', parameters('functionAppName'))]",
            "[resourceId('Microsoft.Insights/components/', variables('appInsightsName'))]"
          ],
          "tags": {
            "displayName": "appSettings"
          },
          "properties": {
            "AzureWebJobsDashboard": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), variables('storageConnectionStringName'))).secretUriWithVersion,  ')')]",
            "AzureWebJobsStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), variables('storageConnectionStringName'))).secretUriWithVersion,  ')')]",
            "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), variables('storageConnectionStringName'))).secretUriWithVersion,  ')')]",
            "WEBSITE_CONTENTSHARE": "[toLower(parameters('functionAppName'))]",
            "FUNCTIONS_EXTENSION_VERSION": "~3",
            "FUNCTIONS_WORKER_RUNTIME": "dotnet",
            "Vault": "[parameters('vaultName')]",
            "AzureAppService__WebAppName": "[parameters('targetWebAppName')]",
            "AzureAppService__ResourceGroupName": "[parameters('targetWebAppResourceGroupName')]",
            "AzureAppService__AzureServicePrincipal__UseManagendIdentity": "true",
            "AzureAppService__AzureSubscription__Tenant": "[subscription().tenantId]",
            "AzureAppService__AzureSubscription__SubscriptionId": "[subscription().subscriptionId]",
            "AzureAppService__AzureSubscription__AzureRegion": "AzureGlobalCloud",
            "DnsSettings__ResourceGroupName": "[parameters('dnsResourceGroupName')]",
            "DnsSettings__AzureServicePrincipal__UseManagendIdentity": "true",
            "DnsSettings__AzureSubscription__Tenant": "[subscription().tenantId]",
            "DnsSettings__AzureSubscription__SubscriptionId": "[subscription().subscriptionId]",
            "DnsSettings__AzureSubscription__AzureRegion": "AzureGlobalCloud",
            "AcmeDnsRequest__CsrInfo__Organization": "[parameters('csrOrganisation')]",
            "AcmeDnsRequest__RegistrationEmail": "[parameters('acmeRegistrationEmail')]",
            "AcmeDnsRequest__AcmeEnvironment__Name": "[parameters('acmeEnvironment')]",
            "AcmeDnsRequest__Hosts": "[parameters('certificateDomains')]",
            "AcmeDnsRequest__PFXPassword": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('vaultName'), variables('pfxPass'))).secretUriWithVersion,  ')')]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(concat('microsoft.insights/components/', variables('appInsightsName'))).InstrumentationKey]",
            "WEBSITE_RUN_FROM_PACKAGE": "[parameters('runFromPackage')]",
            "CertRenewSchedule": "[parameters('certRenewSchedule')]"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[variables('appInsightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', parameters('functionAppName'))]": "Resource",
        "displayName": "AppInsightsComponent"
      },
      "properties": {
        "applicationId": "[variables('appInsightsName')]"
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "nestedTemplate",
      "condition": true,
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[parameters('targetWebAppResourceGroupName')]",
      "subscriptionId": "[subscription().subscriptionId]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', parameters('functionAppName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2017-05-01",
              "name": "[parameters('roleNameGuid')]",
              "properties": {
                "roleDefinitionId": "[variables(parameters('builtInRoleType'))]",
                "principalId": "[reference(concat('Microsoft.Web/sites/', parameters('functionAppName')), '2018-02-01', 'Full').identity.principalId]",
                "scope": "[variables('scope')]"
              }
            }
          ]
        },
        "parameters": {}
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "nestedTemplateDns",
      "condition": true,
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[parameters('dnsResourceGroupName')]",
      "subscriptionId": "[subscription().subscriptionId]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', parameters('functionAppName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2017-05-01",
              "name": "[parameters('roleNameDnsGuid')]",
              "properties": {
                "roleDefinitionId": "[variables(parameters('builtInRoleType'))]",
                "principalId": "[reference(concat('Microsoft.Web/sites/', parameters('functionAppName')), '2018-02-01', 'Full').identity.principalId]",
                "scope": "[variables('scopeDns')]"
              }
            }
          ]
        },
        "parameters": {}
      }
    }
  ],
  "outputs": {}
}